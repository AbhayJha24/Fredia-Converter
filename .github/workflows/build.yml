name: Linting and Building
description: This workflow runs on every push to the repository and performs linting and building tasks.
on: [push]

permissions:
  contents: write

jobs:
    Linting:
        name: Linting Job
        runs-on: ubuntu-latest
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            -   name: Setup Node Js
                uses: actions/setup-node@v4
                with:
                    node-version: 22

            - name: Install dependencies
              run: |
                npm install

            - name: Run tsc
              run: |
                tsc --project ./tsconfig.json
            
            - name: Run eslint
              run: |
                npx eslint .

            - name: Run eslint for Frontend
              run: |
                cd frontend
                npm install
                npx eslint .

    Building:
        name: Building Job
        strategy:
          matrix:
            os: [ubuntu-latest, windows-latest, macos-latest]
            arch: [x64, arm64]
        runs-on: ${{ matrix.os }}
        needs: Linting
        steps:
            - name: Check out repository code
              uses: actions/checkout@v4

            - name: Setup Node Js
              uses: actions/setup-node@v4
              with:
                node-version: 22

            - name: Install dependencies
              run: |
                npm install

            - name: Run tsc
              run: |
                npx tsc --project ./tsconfig.json

            - name: Install Frontend Dependencies & Build the Frontend
              run: |
                cd frontend
                npm install
                npm run build

            - name: Build executable Windows x64
              if: matrix.os == 'windows-latest' && matrix.arch == 'x64'
              run: |
                npm run build-windows

            - name: Build executable Linux x64
              if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
              run: |
                npm run build-linux

            - name: Build executable Mac x64
              if: matrix.os == 'macos-latest' && matrix.arch == 'x64'
              run: |
                npm run build-mac

            - name: Build executable Windows arm64
              if: matrix.os == 'windows-latest' && matrix.arch == 'arm64'
              run: |
                npm run build-windows-arm

            - name: Build executable Linux arm64
              if: matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64'
              run: |
                npm run build-linux-arm

            - name: Build executable Mac arm64
              if: matrix.os == 'macos-latest' && matrix.arch == 'arm64'
              run: |
                npm run build-mac-arm

            - name: Zip Windows Files x64
              if: (matrix.os == 'windows-latest' && matrix.arch == 'x64')
              shell: pwsh
              run: Compress-Archive -Path dist/FrediaConverter-win32-x64/* -DestinationPath fredia-converter-windows-x64.zip

            - name: Zip Windows Files arm64
              if: (matrix.os == 'windows-latest' && matrix.arch == 'arm64')
              shell: pwsh
              run: Compress-Archive -Path dist/FrediaConverter-win32-arm64/* -DestinationPath fredia-converter-windows-arm64.zip
              
            - name: Zip Linux Files x64
              if: (matrix.os == 'ubuntu-latest' && matrix.arch == 'x64')
              run: zip -r fredia-converter-linux-x64.zip dist/FrediaConverter-linux-x64/

            - name: Zip Linux Files arm64
              if: (matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64')
              run: zip -r fredia-converter-linux-arm64.zip dist/FrediaConverter-linux-arm64/
              
            - name: Zip Mac Files x64
              if: (matrix.os == 'macos-latest' && matrix.arch == 'x64')
              run: zip -r fredia-converter-macos-x64.zip dist/FrediaConverter-darwin-x64/
              
            - name: Zip Mac Files arm64
              if: (matrix.os == 'macos-latest' && matrix.arch == 'arm64')
              run: zip -r fredia-converter-macos-arm64.zip dist/FrediaConverter-darwin-arm64/

            - name: Create GitHub Release Windows x64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'windows-latest' && matrix.arch == 'x64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-windows-x64.zip
                
            - name: Create GitHub Release Windows arm64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'windows-latest' && matrix.arch == 'arm64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-windows-arm64.zip

            - name: Create GitHub Release Linux x64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'ubuntu-latest' && matrix.arch == 'x64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-linux-x64.zip
                
            - name: Create GitHub Release Linux arm64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-linux-arm64.zip

            - name: Create GitHub Release Mac x64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'macos-latest' && matrix.arch == 'x64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-macos-x64.zip
                
            - name: Create GitHub Release Mac arm64
              if: startsWith(github.ref, 'refs/tags/') && (matrix.os == 'macos-latest' && matrix.arch == 'arm64')
              uses: softprops/action-gh-release@v1
              with:
                files: fredia-converter-macos-arm64.zip
   